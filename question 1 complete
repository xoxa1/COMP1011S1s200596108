package com.student.model;

import java.time.LocalDate;
import java.util.List;

public class car {
    private int carID;
    private int modelYear;
    private String make;
    private String model;
    private int price;
    private LocalDate dateSold;

    private static final List<String> ALLOWED_MAKES = List.of("Acura", "Ford", "Honda", "Nissan", "Tesla");

    public void Car(int carID, int modelYear, String make, String model, int price, LocalDate dateSold) {
        setCarID(carID);
        this.modelYear = modelYear;
        setMake(make);
        setModel(model);
        setPrice(price);
        setDateSold(dateSold);
    }

    public int getCarID() {
        return carID;
    }

    public void setCarID(int carID) {
        if (carID <= 0) {
            throw new IllegalArgumentException("Car ID must be greater than 0.");
        }
        this.carID = carID;
    }

    public int getModelYear() {
        return modelYear;
    }

    public void setModelYear(int modelYear) {
        this.modelYear = modelYear;
    }

    public String getMake() {
        return make;
    }

    public void setMake(String make) {
        if (!ALLOWED_MAKES.contains(make)) {
            throw new IllegalArgumentException("Make must be one of: Acura, Ford, Honda, Nissan, or Tesla.");
        }
        this.make = make;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        if (model == null || model.trim().length() < 2) {
            throw new IllegalArgumentException("Model must be at least 2 characters long.");
        }
        this.model = model;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        if (price <= 0) {
            throw new IllegalArgumentException("Price must be greater than 0.");
        }
        this.price = price;
    }

    public LocalDate getDateSold() {
        return dateSold;
    }

    public void setDateSold(LocalDate dateSold) {
        if (dateSold == null || dateSold.isAfter(LocalDate.now())) {
            throw new IllegalArgumentException("Date sold cannot be in the future.");
        }
        this.dateSold = dateSold;
    }
}
